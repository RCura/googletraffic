add_query_hide_credentials = T){
# Checks -----------------------------------------------------------------------
if(length(location_unit_type) != 1) stop("'location_unit_type' must be a vector of length one, either 'coordinates' or 'country'; only one option allowed")
# TODO: Checks for which ones can't have map_param
# Convert param inputs to iterable list --------------------------------------
## Latitude/Longitude
# Need to treat lat/lon bit differently as the input is a vector of lat/lon
if(is.list(lat_lon)){
if(lat_lon[[1]] == "map_param"){
lat_lon <- lat_lon[lat_lon != "map_param"] %>% unlist()
lat_lon <- split(lat_lon, ceiling(seq_along(lat_lon)/2))
} else{
stop('"lat_lon" cannot be a list')
}
} else{
lat_lon <- list(lat_lon)
}
## Location Parameters
radius         <- radius         %>% make_iterable()
radius_unit    <- radius_unit    %>% make_iterable()
location_keys  <- location_keys  %>% make_iterable()
location_types <- location_types %>% make_iterable()
locales        <- locales        %>% make_iterable()
## Flex targetting parameters
interests          <- interests          %>% make_iterable()
behaviors          <- behaviors          %>% make_iterable()
college_years      <- college_years      %>% make_iterable()
education_majors   <- education_majors   %>% make_iterable()
education_schools  <- education_schools  %>% make_iterable()
education_statuses <- education_statuses %>% make_iterable()
family_statuses    <- family_statuses    %>% make_iterable()
income             <- income             %>% make_iterable()
industries         <- industries         %>% make_iterable()
work_positions     <- work_positions     %>% make_iterable()
work_employers     <- work_employers     %>% make_iterable()
## Exclude parameters
excl_interests          <- excl_interests          %>% make_iterable()
excl_behaviors          <- excl_behaviors          %>% make_iterable()
excl_college_years      <- excl_college_years      %>% make_iterable()
excl_education_majors   <- excl_education_majors   %>% make_iterable()
excl_education_schools  <- excl_education_schools  %>% make_iterable()
excl_education_statuses <- excl_education_statuses %>% make_iterable()
excl_family_statuses    <- excl_family_statuses    %>% make_iterable()
excl_income             <- excl_income             %>% make_iterable()
excl_industries         <- excl_industries         %>% make_iterable()
excl_work_positions     <- excl_work_positions     %>% make_iterable()
excl_work_employers     <- excl_work_employers     %>% make_iterable()
## Non flex targetting parameters
relationship_statuses <- relationship_statuses %>% make_iterable()
life_events           <- life_events           %>% make_iterable()
user_os               <- user_os               %>% make_iterable()
wireless_carrier      <- wireless_carrier      %>% make_iterable()
gender                <- gender                %>% make_iterable()
age_min               <- age_min               %>% make_iterable()
age_max               <- age_max               %>% make_iterable()
## Flex target, advanced
flex_target <- flex_target %>% make_iterable()
# Length parameter inputs to same length ---------------------------------------
param_grid_df <- expand.grid(lat_lon        = lat_lon,
radius         = radius,
radius_unit    = radius_unit,
location_keys  = location_keys,
location_types = location_types,
locales        = locales,
## Flex targetting parameters
interests          = interests,
behaviors          = behaviors,
college_years      = college_years,
education_majors   = education_majors,
education_schools  = education_schools,
education_statuses = education_statuses,
family_statuses    = family_statuses,
income             = income,
industries         = industries,
work_positions     = work_positions,
work_employers     = work_employers,
## Exclude parameters
excl_interests          = excl_interests,
excl_behaviors          = excl_behaviors,
excl_college_years      = excl_college_years,
excl_education_majors   = excl_education_majors,
excl_education_schools  = excl_education_schools,
excl_education_statuses = excl_education_statuses,
excl_family_statuses    = excl_family_statuses,
excl_income             = excl_income,
excl_industries         = excl_industries,
excl_work_positions     = excl_work_positions,
excl_work_employers     = excl_work_employers,
## Non flex targetting parameters
relationship_statuses = relationship_statuses,
life_events           = life_events,
user_os               = user_os,
wireless_carrier      = wireless_carrier,
gender                = gender,
age_min               = age_min,
age_max               = age_max,
## Flex target, advanced
flex_target = flex_target)
# Length parameter inputs to same length -------------------------------------
out_df <- mapply(query_fb_marketing_api_1call,
lat_lon        = param_grid_df$lat_lon,
radius         = param_grid_df$radius,
radius_unit    = param_grid_df$radius_unit,
location_keys  = param_grid_df$location_keys,
location_types = param_grid_df$location_types,
locales        = param_grid_df$locales,
## Flex targeting parameters
interests          = param_grid_df$interests,
behaviors          = param_grid_df$behaviors,
college_years      = param_grid_df$college_years,
education_majors   = param_grid_df$education_majors,
education_schools  = param_grid_df$education_schools,
education_statuses = param_grid_df$education_statuses,
family_statuses    = param_grid_df$family_statuses,
income             = param_grid_df$income,
industries         = param_grid_df$industries,
work_positions     = param_grid_df$work_positions,
work_employers     = param_grid_df$work_employers,
## Exclude parameters
excl_interests          = param_grid_df$excl_interests,
excl_behaviors          = param_grid_df$excl_behaviors,
excl_college_years      = param_grid_df$excl_college_years,
excl_education_majors   = param_grid_df$excl_education_majors,
excl_education_schools  = param_grid_df$excl_education_schools,
excl_education_statuses = param_grid_df$excl_education_statuses,
excl_family_statuses    = param_grid_df$excl_family_statuses,
excl_income             = param_grid_df$excl_income,
excl_industries         = param_grid_df$excl_industries,
excl_work_positions     = param_grid_df$excl_work_positions,
excl_work_employers     = param_grid_df$excl_work_employers,
## Non flex targetting parameters
relationship_statuses = param_grid_df$relationship_statuses,
life_events           = param_grid_df$life_events,
user_os               = param_grid_df$user_os,
wireless_carrier      = param_grid_df$wireless_carrier,
gender                = param_grid_df$gender,
age_min               = param_grid_df$age_min,
age_max               = param_grid_df$age_max,
## Flex target, advanced
flex_target = param_grid_df$flex_target,
MoreArgs = list(location_unit_type         = location_unit_type,
add_param_id_name_vars     = add_param_id_name_vars,
sleep_time                 = sleep_time,
show_result                = show_result,
add_query                  = add_query,
add_query_hide_credentials = add_query_hide_credentials,
version                    = version,
creation_act               = creation_act,
token                      = token),
SIMPLIFY = F
) %>%
bind_rows()
return(out_df)
}
# Testing ----------------------------------------------------------------------
#### Default parameters ####
lat_lon = NULL
radius = NULL
radius_unit = NULL
location_keys = NULL
location_types = "home"
locales = NULL
#### Specify here or in flex_targeting
interests = NULL
behaviors = NULL
college_years = NULL
education_majors = NULL
education_schools = NULL
education_statuses = NULL
family_statuses = NULL
income = NULL
industries = NULL
work_positions = NULL
work_employers = NULL
## Exclude
excl_interests = NULL
excl_behaviors = NULL
excl_college_years = NULL
excl_education_majors = NULL
excl_education_schools = NULL
excl_education_statuses = NULL
excl_family_statuses = NULL
excl_income = NULL
excl_industries = NULL
excl_work_positions = NULL
excl_work_employers = NULL
## Non Flex Targetting Parameters
relationship_statuses = NULL
life_events = NULL
#industries = NULL,
user_os = NULL
wireless_carrier = NULL
gender = c(1,2)
age_min = 18
age_max = 65
flex_target = NULL
## API Keys/Info
version = VERSION
creation_act = CREATION_ACT
token = TOKEN
## Query info
sleep_time = 20
show_result = T
## Add to dataframe
add_param_id_name_vars = F
add_query = F
add_query_hide_credentials = T
#### Test Function ####
out1 <- query_fb_marketing_api(location_unit_type = "coordinates",
lat_lon = c(38.913744, -77.040018),
radius = 10,
radius_unit = "kilometer",
location_types = "home",
behaviors = list(6002714895372, 6002714898572),
interests = c(6002839660079, 6002866718622),
excl_interests = c(6002868910910, 6002884511422),
excl_behaviors = c(6003986707172, 6003966451572),
version = VERSION,
creation_act = CREATION_ACT,
token = TOKEN,
add_query = T,
add_query_hide_credentials = F)
View(out1)
out2
getwd()
library(googletraffic)
# install.packages("devtools")
devtools::install_github("dime-worldbank/googletraffic")
library(googletraffic)
api_keys_df <- readr::read_csv("~/Dropbox/World Bank/Webscraping/Files for Server/api_keys.csv")
google_key <- api_keys_df |>
dplyr::filter(Service == "Google Directions API",
Account == "ramarty@email.wm.edu") |>
dplyr::pull(Key)
## Load Google Traffic package
library(googletraffic)
## Load additional packages for working with and visualizing data
library(leaflet)
library(leaflet.extras)
library(leaflet.providers)
library(scales)
library(mapview)
library(raster)
library(tidyverse)
r <- gt_make_raster(location   = c(40.712778, -74.006111),
height     = 1000,
width      = 1000,
zoom       = 16,
google_key = google_key)
## Define Leaflet Palette and Legend
traffic_pal <- colorNumeric(c("green", "orange", "red", "#660000"),
1:4,
na.color = "transparent")
leaflet(width = "100%") %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addRasterImage(r, colors = traffic_pal, opacity = 1)
help(gt_make_raster)
[zoom](https://wiki.openstreetmap.org/wiki/Zoom_levels)
help(gt_make_raster_from_grid)
help(gt_make_raster_from_grid)
library(googletraffic)
help(gt_make_raster_from_grid)
help(gt_mosaic)
roxygen2::roxygenise("~/Documents/Github/googletraffic")
setwd("~/Documents/Github/googletraffic")
usethis::use_pkgdown()
#usethis::use_pkgdown_github_pages()
pkgdown::deploy_to_branch()
pkgdown::build_site()
# Make T/S/C Spatial File
# Setup ------------------------------------------------------------------------
if(Sys.info()[["user"]] == "robmarty"){
dropbox_file_path <- "~/Dropbox/World Bank/IEs/Lagos"
github_dir <- "~/Documents/Github/danfo"
}
library(tidyverse)
library(haven)
library(rgdal)
library(sf)
library(raster)
# Load/prep data ---------------------------------------------------------------
## SD - 1
me_gdb <- file.path(github_dir, "raw", "survey",
"1_cleaning_spatial_data", "output", "spatial_data.gdb")
ogrListLayers(me_gdb)
bus_rts <- readOGR(me_gdb,"Bus_Routes")
## SD - 2
me_gdb <- file.path(github_dir, "GIS", "clean_BRI_routes",
"output", "manual_edits.gdb")
ogrListLayers(me_gdb)
routes_sp <- rbind(readOGR(me_gdb,"Zone_1"),
readOGR(me_gdb,"Zone_2"),
readOGR(me_gdb,"Zone_3"),
readOGR(me_gdb,"Zone_4"),
readOGR(me_gdb,"Zone_5"),
readOGR(me_gdb,"Zone_6"),
readOGR(me_gdb,"Zone_7"))
## Remove routes with no names
routes_sp <- routes_sp[!(routes_sp$Route_manual_edits %in% c("", " ")),]
routes_sf <- routes_sp %>% st_as_sf()
# A couple routes have the same name. When looking at the T/S/C data, they have
# the same T/S/C status, so OK to combine into same row.
routes_diss_sf <- routes_sf %>%
dplyr::group_by(Route_manual_edits) %>%
summarise()
## TSC Data
tc_df <- read_dta(file.path(github_dir, "GIS", "TSC_v2", "output", "clean_bri_plans.dta"))
tc_df <- tc_df[tc_df$name_shapefile != "",]
table(tc_df$name_shapefile %in% bus_rts$ROUTE_NAME)
table(tc_df$name_shapefile %in% routes_diss_sf$Route_manual_edits)
## SD - 2
me_gdb <- file.path(github_dir, "GIS", "clean_BRI_routes",
"output", "manual_edits.gdb")
ogrListLayers(me_gdb)
routes_sp <- rbind(readOGR(me_gdb,"Zone_1"),
readOGR(me_gdb,"Zone_2"),
readOGR(me_gdb,"Zone_3"),
readOGR(me_gdb,"Zone_4"),
readOGR(me_gdb,"Zone_5"),
readOGR(me_gdb,"Zone_6"),
readOGR(me_gdb,"Zone_7"))
routes_sp@data
routes_sp$Route_manual_edits
# Export data ------------------------------------------------------------------
me_gdb <- file.path(github_dir, "GIS", "clean_BRI_routes",
"output", "manual_edits.gdb")
ogrListLayers(me_gdb)
routes_sp <- rbind(readOGR(me_gdb,"Zone_1"),
readOGR(me_gdb,"Zone_2"),
readOGR(me_gdb,"Zone_3"),
readOGR(me_gdb,"Zone_4"),
readOGR(me_gdb,"Zone_5"),
readOGR(me_gdb,"Zone_6"),
readOGR(me_gdb,"Zone_7"))
write_csv(routes_sp@data, "~/Desktop/manual_edits.csv")
#### Other
me_gdb <- file.path(github_dir, "raw", "survey",
"1_cleaning_spatial_data", "output", "spatial_data.gdb")
ogrListLayers(me_gdb)
# Export data ------------------------------------------------------------------
#### Manual Edits
me_gdb <- file.path(github_dir, "GIS", "clean_BRI_routes",
"output", "manual_edits.gdb")
ogrListLayers(me_gdb)
routes_sp <- rbind(readOGR(me_gdb,"Zone_1"),
readOGR(me_gdb,"Zone_2"),
readOGR(me_gdb,"Zone_3"),
readOGR(me_gdb,"Zone_4"),
readOGR(me_gdb,"Zone_5"),
readOGR(me_gdb,"Zone_6"),
readOGR(me_gdb,"Zone_7"))
write_csv(routes_sp@data, "~/Desktop/manual_edits.csv")
#### Other
me_gdb <- file.path(github_dir, "raw", "survey",
"1_cleaning_spatial_data", "output", "spatial_data.gdb")
ogrListLayers(me_gdb)
routes_sp <- rbind(readOGR(me_gdb,"Zone_1"),
readOGR(me_gdb,"Zone_1a"),
readOGR(me_gdb,"Zone_1b"),
readOGR(me_gdb,"Zone_1c"),
readOGR(me_gdb,"Zone_2"),
readOGR(me_gdb,"Zone_3"),
readOGR(me_gdb,"Zone_3a"),
readOGR(me_gdb,"Zone_3b"),
readOGR(me_gdb,"Zone_3c"),
readOGR(me_gdb,"Zone_3d"),
readOGR(me_gdb,"Zone_4"),
readOGR(me_gdb,"Zone_4a"),
readOGR(me_gdb,"Zone_4b"),
readOGR(me_gdb,"Zone_5"),
readOGR(me_gdb,"Zone_6"),
readOGR(me_gdb,"Zone_7"))
readOGR(me_gdb,"Zone_1")
routes_sp <- rbind(readOGR(me_gdb,"Zone_1"),
readOGR(me_gdb,"Zone_1a"),
readOGR(me_gdb,"Zone_1b"),
readOGR(me_gdb,"Zone_1c"),
readOGR(me_gdb,"Zone_2"),
readOGR(me_gdb,"Zone_3"),
readOGR(me_gdb,"Zone_3a"),
readOGR(me_gdb,"Zone_3b"),
readOGR(me_gdb,"Zone_3c"),
readOGR(me_gdb,"Zone_3d"),
readOGR(me_gdb,"Zone_4"),
readOGR(me_gdb,"Zone_4a"),
readOGR(me_gdb,"Zone_4b"),
readOGR(me_gdb,"Zone_5"),
readOGR(me_gdb,"Zone_6"),
readOGR(me_gdb,"Zone_7"))
readOGR(me_gdb,"Zone_1a")
ogrListLayers(me_gdb)
routes_sp <- rbind(readOGR(me_gdb,"Zone_1"),
readOGR(me_gdb,"Zone1a"),
readOGR(me_gdb,"Zone1b"),
readOGR(me_gdb,"Zone1c"),
readOGR(me_gdb,"Zone_2"),
readOGR(me_gdb,"Zone_3"),
readOGR(me_gdb,"Zone_3a"),
readOGR(me_gdb,"Zone_3b"),
readOGR(me_gdb,"Zone_3c"),
readOGR(me_gdb,"Zone_3d"),
readOGR(me_gdb,"Zone_4"),
readOGR(me_gdb,"Zone_4a"),
readOGR(me_gdb,"Zone_4b"),
readOGR(me_gdb,"Zone_5"),
readOGR(me_gdb,"Zone_6"),
readOGR(me_gdb,"Zone_7"))
routes_sp <- rbind(readOGR(me_gdb,"Zone_1"),
#readOGR(me_gdb,"Zone1a"),
#readOGR(me_gdb,"Zone1b"),
#readOGR(me_gdb,"Zone1c"),
readOGR(me_gdb,"Zone_2"),
readOGR(me_gdb,"Zone_3"),
#readOGR(me_gdb,"Zone_3a"),
#readOGR(me_gdb,"Zone_3b"),
#readOGR(me_gdb,"Zone_3c"),
#readOGR(me_gdb,"Zone_3d"),
readOGR(me_gdb,"Zone_4"),
#readOGR(me_gdb,"Zone_4a"),
#readOGR(me_gdb,"Zone_4b"),
readOGR(me_gdb,"Zone_5"),
readOGR(me_gdb,"Zone_6"),
readOGR(me_gdb,"Zone_7"))
readOGR(me_gdb,"Zone_1") %>% as.data.frame()
a <- readOGR(me_gdb,"Zone_1") %>% as.data.frame()
a
routes_sp <- rbind(readOGR(me_gdb,"Zone_1") %>% as.data.frame(),
readOGR(me_gdb,"Zone1a") %>% as.data.frame(),
readOGR(me_gdb,"Zone1b") %>% as.data.frame(),
readOGR(me_gdb,"Zone1c") %>% as.data.frame(),
readOGR(me_gdb,"Zone_2") %>% as.data.frame(),
readOGR(me_gdb,"Zone_3") %>% as.data.frame(),
readOGR(me_gdb,"Zone_3a") %>% as.data.frame(),
readOGR(me_gdb,"Zone_3b") %>% as.data.frame(),
readOGR(me_gdb,"Zone_3c") %>% as.data.frame(),
readOGR(me_gdb,"Zone_3d") %>% as.data.frame(),
readOGR(me_gdb,"Zone_4") %>% as.data.frame(),
readOGR(me_gdb,"Zone_4a") %>% as.data.frame(),
readOGR(me_gdb,"Zone_4b") %>% as.data.frame(),
readOGR(me_gdb,"Zone_5") %>% as.data.frame(),
readOGR(me_gdb,"Zone_6") %>% as.data.frame(),
readOGR(me_gdb,"Zone_7") %>% as.data.frame())
routes_sp <- bind_row(readOGR(me_gdb,"Zone_1") %>% as.data.frame(),
readOGR(me_gdb,"Zone1a") %>% as.data.frame(),
readOGR(me_gdb,"Zone1b") %>% as.data.frame(),
readOGR(me_gdb,"Zone1c") %>% as.data.frame(),
readOGR(me_gdb,"Zone_2") %>% as.data.frame(),
readOGR(me_gdb,"Zone_3") %>% as.data.frame(),
readOGR(me_gdb,"Zone_3a") %>% as.data.frame(),
readOGR(me_gdb,"Zone_3b") %>% as.data.frame(),
readOGR(me_gdb,"Zone_3c") %>% as.data.frame(),
readOGR(me_gdb,"Zone_3d") %>% as.data.frame(),
readOGR(me_gdb,"Zone_4") %>% as.data.frame(),
readOGR(me_gdb,"Zone_4a") %>% as.data.frame(),
readOGR(me_gdb,"Zone_4b") %>% as.data.frame(),
readOGR(me_gdb,"Zone_5") %>% as.data.frame(),
readOGR(me_gdb,"Zone_6") %>% as.data.frame(),
readOGR(me_gdb,"Zone_7") %>% as.data.frame())
routes_sp <- bind_rows(readOGR(me_gdb,"Zone_1") %>% as.data.frame(),
readOGR(me_gdb,"Zone1a") %>% as.data.frame(),
readOGR(me_gdb,"Zone1b") %>% as.data.frame(),
readOGR(me_gdb,"Zone1c") %>% as.data.frame(),
readOGR(me_gdb,"Zone_2") %>% as.data.frame(),
readOGR(me_gdb,"Zone_3") %>% as.data.frame(),
readOGR(me_gdb,"Zone_3a") %>% as.data.frame(),
readOGR(me_gdb,"Zone_3b") %>% as.data.frame(),
readOGR(me_gdb,"Zone_3c") %>% as.data.frame(),
readOGR(me_gdb,"Zone_3d") %>% as.data.frame(),
readOGR(me_gdb,"Zone_4") %>% as.data.frame(),
readOGR(me_gdb,"Zone_4a") %>% as.data.frame(),
readOGR(me_gdb,"Zone_4b") %>% as.data.frame(),
readOGR(me_gdb,"Zone_5") %>% as.data.frame(),
readOGR(me_gdb,"Zone_6") %>% as.data.frame(),
readOGR(me_gdb,"Zone_7") %>% as.data.frame())
head(routes_sp)
View(routes_sp)
a <-     readOGR(me_gdb,"Zone_3b") %>% as.data.frame()
head(a)
a <-   readOGR(me_gdb,"Zone_5") %>% as.data.frame()
routes_sp <- bind_rows(readOGR(me_gdb,"Zone_1") %>% as.data.frame(),
#readOGR(me_gdb,"Zone1a") %>% as.data.frame(),
#readOGR(me_gdb,"Zone1b") %>% as.data.frame(),
#readOGR(me_gdb,"Zone1c") %>% as.data.frame(),
readOGR(me_gdb,"Zone_2") %>% as.data.frame(),
readOGR(me_gdb,"Zone_3") %>% as.data.frame(),
#readOGR(me_gdb,"Zone_3a") %>% as.data.frame(),
#readOGR(me_gdb,"Zone_3b") %>% as.data.frame(),
#readOGR(me_gdb,"Zone_3c") %>% as.data.frame(),
#readOGR(me_gdb,"Zone_3d") %>% as.data.frame(),
readOGR(me_gdb,"Zone_4") %>% as.data.frame(),
#readOGR(me_gdb,"Zone_4a") %>% as.data.frame(),
#readOGR(me_gdb,"Zone_4b") %>% as.data.frame(),
readOGR(me_gdb,"Zone_5") %>% as.data.frame(),
readOGR(me_gdb,"Zone_6") %>% as.data.frame(),
readOGR(me_gdb,"Zone_7") %>% as.data.frame())
routes_df <- bind_rows(readOGR(me_gdb,"Zone_1") %>% as.data.frame(),
#readOGR(me_gdb,"Zone1a") %>% as.data.frame(),
#readOGR(me_gdb,"Zone1b") %>% as.data.frame(),
#readOGR(me_gdb,"Zone1c") %>% as.data.frame(),
readOGR(me_gdb,"Zone_2") %>% as.data.frame(),
readOGR(me_gdb,"Zone_3") %>% as.data.frame(),
#readOGR(me_gdb,"Zone_3a") %>% as.data.frame(),
#readOGR(me_gdb,"Zone_3b") %>% as.data.frame(),
#readOGR(me_gdb,"Zone_3c") %>% as.data.frame(),
#readOGR(me_gdb,"Zone_3d") %>% as.data.frame(),
readOGR(me_gdb,"Zone_4") %>% as.data.frame(),
#readOGR(me_gdb,"Zone_4a") %>% as.data.frame(),
#readOGR(me_gdb,"Zone_4b") %>% as.data.frame(),
readOGR(me_gdb,"Zone_5") %>% as.data.frame(),
readOGR(me_gdb,"Zone_6") %>% as.data.frame(),
readOGR(me_gdb,"Zone_7") %>% as.data.frame())
write_csv(routes_df, "~/Desktop/spatial_data.csv")
